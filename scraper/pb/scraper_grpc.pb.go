// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: scraper/pb/scraper.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScraperService_CreateScraperJob_FullMethodName       = "/scraper.ScraperService/CreateScraperJob"
	ScraperService_GetScraperJob_FullMethodName          = "/scraper.ScraperService/GetScraperJob"
	ScraperService_ListScraperJobs_FullMethodName        = "/scraper.ScraperService/ListScraperJobs"
	ScraperService_CancelScraperJob_FullMethodName       = "/scraper.ScraperService/CancelScraperJob"
	ScraperService_DeleteScraperJob_FullMethodName       = "/scraper.ScraperService/DeleteScraperJob"
	ScraperService_ListSupportedPlatforms_FullMethodName = "/scraper.ScraperService/ListSupportedPlatforms"
	ScraperService_GetPlatformStatus_FullMethodName      = "/scraper.ScraperService/GetPlatformStatus"
	ScraperService_GetScrapedData_FullMethodName         = "/scraper.ScraperService/GetScrapedData"
)

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	// Scraper management
	CreateScraperJob(ctx context.Context, in *CreateScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error)
	GetScraperJob(ctx context.Context, in *GetScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error)
	ListScraperJobs(ctx context.Context, in *ListScraperJobsRequest, opts ...grpc.CallOption) (*ListScraperJobsResponse, error)
	CancelScraperJob(ctx context.Context, in *CancelScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error)
	DeleteScraperJob(ctx context.Context, in *DeleteScraperJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Platform operations
	ListSupportedPlatforms(ctx context.Context, in *ListSupportedPlatformsRequest, opts ...grpc.CallOption) (*ListSupportedPlatformsResponse, error)
	GetPlatformStatus(ctx context.Context, in *GetPlatformStatusRequest, opts ...grpc.CallOption) (*PlatformStatus, error)
	// Scraper results
	GetScrapedData(ctx context.Context, in *GetScrapedDataRequest, opts ...grpc.CallOption) (*GetScrapedDataResponse, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) CreateScraperJob(ctx context.Context, in *CreateScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScraperJob)
	err := c.cc.Invoke(ctx, ScraperService_CreateScraperJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) GetScraperJob(ctx context.Context, in *GetScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScraperJob)
	err := c.cc.Invoke(ctx, ScraperService_GetScraperJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) ListScraperJobs(ctx context.Context, in *ListScraperJobsRequest, opts ...grpc.CallOption) (*ListScraperJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScraperJobsResponse)
	err := c.cc.Invoke(ctx, ScraperService_ListScraperJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) CancelScraperJob(ctx context.Context, in *CancelScraperJobRequest, opts ...grpc.CallOption) (*ScraperJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScraperJob)
	err := c.cc.Invoke(ctx, ScraperService_CancelScraperJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) DeleteScraperJob(ctx context.Context, in *DeleteScraperJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScraperService_DeleteScraperJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) ListSupportedPlatforms(ctx context.Context, in *ListSupportedPlatformsRequest, opts ...grpc.CallOption) (*ListSupportedPlatformsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSupportedPlatformsResponse)
	err := c.cc.Invoke(ctx, ScraperService_ListSupportedPlatforms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) GetPlatformStatus(ctx context.Context, in *GetPlatformStatusRequest, opts ...grpc.CallOption) (*PlatformStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatformStatus)
	err := c.cc.Invoke(ctx, ScraperService_GetPlatformStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) GetScrapedData(ctx context.Context, in *GetScrapedDataRequest, opts ...grpc.CallOption) (*GetScrapedDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrapedDataResponse)
	err := c.cc.Invoke(ctx, ScraperService_GetScrapedData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility.
type ScraperServiceServer interface {
	// Scraper management
	CreateScraperJob(context.Context, *CreateScraperJobRequest) (*ScraperJob, error)
	GetScraperJob(context.Context, *GetScraperJobRequest) (*ScraperJob, error)
	ListScraperJobs(context.Context, *ListScraperJobsRequest) (*ListScraperJobsResponse, error)
	CancelScraperJob(context.Context, *CancelScraperJobRequest) (*ScraperJob, error)
	DeleteScraperJob(context.Context, *DeleteScraperJobRequest) (*emptypb.Empty, error)
	// Platform operations
	ListSupportedPlatforms(context.Context, *ListSupportedPlatformsRequest) (*ListSupportedPlatformsResponse, error)
	GetPlatformStatus(context.Context, *GetPlatformStatusRequest) (*PlatformStatus, error)
	// Scraper results
	GetScrapedData(context.Context, *GetScrapedDataRequest) (*GetScrapedDataResponse, error)
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScraperServiceServer struct{}

func (UnimplementedScraperServiceServer) CreateScraperJob(context.Context, *CreateScraperJobRequest) (*ScraperJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScraperJob not implemented")
}
func (UnimplementedScraperServiceServer) GetScraperJob(context.Context, *GetScraperJobRequest) (*ScraperJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScraperJob not implemented")
}
func (UnimplementedScraperServiceServer) ListScraperJobs(context.Context, *ListScraperJobsRequest) (*ListScraperJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScraperJobs not implemented")
}
func (UnimplementedScraperServiceServer) CancelScraperJob(context.Context, *CancelScraperJobRequest) (*ScraperJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScraperJob not implemented")
}
func (UnimplementedScraperServiceServer) DeleteScraperJob(context.Context, *DeleteScraperJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScraperJob not implemented")
}
func (UnimplementedScraperServiceServer) ListSupportedPlatforms(context.Context, *ListSupportedPlatformsRequest) (*ListSupportedPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedPlatforms not implemented")
}
func (UnimplementedScraperServiceServer) GetPlatformStatus(context.Context, *GetPlatformStatusRequest) (*PlatformStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformStatus not implemented")
}
func (UnimplementedScraperServiceServer) GetScrapedData(context.Context, *GetScrapedDataRequest) (*GetScrapedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrapedData not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}
func (UnimplementedScraperServiceServer) testEmbeddedByValue()                        {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	// If the following call pancis, it indicates UnimplementedScraperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_CreateScraperJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScraperJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).CreateScraperJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_CreateScraperJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).CreateScraperJob(ctx, req.(*CreateScraperJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_GetScraperJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScraperJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetScraperJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetScraperJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetScraperJob(ctx, req.(*GetScraperJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_ListScraperJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScraperJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).ListScraperJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_ListScraperJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).ListScraperJobs(ctx, req.(*ListScraperJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_CancelScraperJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScraperJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).CancelScraperJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_CancelScraperJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).CancelScraperJob(ctx, req.(*CancelScraperJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_DeleteScraperJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScraperJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).DeleteScraperJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_DeleteScraperJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).DeleteScraperJob(ctx, req.(*DeleteScraperJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_ListSupportedPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupportedPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).ListSupportedPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_ListSupportedPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).ListSupportedPlatforms(ctx, req.(*ListSupportedPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_GetPlatformStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetPlatformStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetPlatformStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetPlatformStatus(ctx, req.(*GetPlatformStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_GetScrapedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrapedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).GetScrapedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_GetScrapedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).GetScrapedData(ctx, req.(*GetScrapedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScraperJob",
			Handler:    _ScraperService_CreateScraperJob_Handler,
		},
		{
			MethodName: "GetScraperJob",
			Handler:    _ScraperService_GetScraperJob_Handler,
		},
		{
			MethodName: "ListScraperJobs",
			Handler:    _ScraperService_ListScraperJobs_Handler,
		},
		{
			MethodName: "CancelScraperJob",
			Handler:    _ScraperService_CancelScraperJob_Handler,
		},
		{
			MethodName: "DeleteScraperJob",
			Handler:    _ScraperService_DeleteScraperJob_Handler,
		},
		{
			MethodName: "ListSupportedPlatforms",
			Handler:    _ScraperService_ListSupportedPlatforms_Handler,
		},
		{
			MethodName: "GetPlatformStatus",
			Handler:    _ScraperService_GetPlatformStatus_Handler,
		},
		{
			MethodName: "GetScrapedData",
			Handler:    _ScraperService_GetScrapedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraper/pb/scraper.proto",
}
