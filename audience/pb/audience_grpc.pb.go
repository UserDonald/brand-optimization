// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: audience/pb/audience.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AudienceService_GetSegments_FullMethodName          = "/audience.AudienceService/GetSegments"
	AudienceService_GetSegment_FullMethodName           = "/audience.AudienceService/GetSegment"
	AudienceService_CreateSegment_FullMethodName        = "/audience.AudienceService/CreateSegment"
	AudienceService_UpdateSegment_FullMethodName        = "/audience.AudienceService/UpdateSegment"
	AudienceService_DeleteSegment_FullMethodName        = "/audience.AudienceService/DeleteSegment"
	AudienceService_GetSegmentMetrics_FullMethodName    = "/audience.AudienceService/GetSegmentMetrics"
	AudienceService_UpdateSegmentMetrics_FullMethodName = "/audience.AudienceService/UpdateSegmentMetrics"
)

// AudienceServiceClient is the client API for AudienceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AudienceService provides APIs for managing audience segments and metrics
type AudienceServiceClient interface {
	// Segment management
	GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*GetSegmentsResponse, error)
	GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error)
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error)
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*UpdateSegmentResponse, error)
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error)
	// Segment metrics
	GetSegmentMetrics(ctx context.Context, in *GetSegmentMetricsRequest, opts ...grpc.CallOption) (*GetSegmentMetricsResponse, error)
	UpdateSegmentMetrics(ctx context.Context, in *UpdateSegmentMetricsRequest, opts ...grpc.CallOption) (*UpdateSegmentMetricsResponse, error)
}

type audienceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudienceServiceClient(cc grpc.ClientConnInterface) AudienceServiceClient {
	return &audienceServiceClient{cc}
}

func (c *audienceServiceClient) GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*GetSegmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentsResponse)
	err := c.cc.Invoke(ctx, AudienceService_GetSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentResponse)
	err := c.cc.Invoke(ctx, AudienceService_GetSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*CreateSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSegmentResponse)
	err := c.cc.Invoke(ctx, AudienceService_CreateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*UpdateSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSegmentResponse)
	err := c.cc.Invoke(ctx, AudienceService_UpdateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*DeleteSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSegmentResponse)
	err := c.cc.Invoke(ctx, AudienceService_DeleteSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) GetSegmentMetrics(ctx context.Context, in *GetSegmentMetricsRequest, opts ...grpc.CallOption) (*GetSegmentMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentMetricsResponse)
	err := c.cc.Invoke(ctx, AudienceService_GetSegmentMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audienceServiceClient) UpdateSegmentMetrics(ctx context.Context, in *UpdateSegmentMetricsRequest, opts ...grpc.CallOption) (*UpdateSegmentMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSegmentMetricsResponse)
	err := c.cc.Invoke(ctx, AudienceService_UpdateSegmentMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudienceServiceServer is the server API for AudienceService service.
// All implementations must embed UnimplementedAudienceServiceServer
// for forward compatibility.
//
// AudienceService provides APIs for managing audience segments and metrics
type AudienceServiceServer interface {
	// Segment management
	GetSegments(context.Context, *GetSegmentsRequest) (*GetSegmentsResponse, error)
	GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error)
	CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error)
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*UpdateSegmentResponse, error)
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error)
	// Segment metrics
	GetSegmentMetrics(context.Context, *GetSegmentMetricsRequest) (*GetSegmentMetricsResponse, error)
	UpdateSegmentMetrics(context.Context, *UpdateSegmentMetricsRequest) (*UpdateSegmentMetricsResponse, error)
	mustEmbedUnimplementedAudienceServiceServer()
}

// UnimplementedAudienceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAudienceServiceServer struct{}

func (UnimplementedAudienceServiceServer) GetSegments(context.Context, *GetSegmentsRequest) (*GetSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegments not implemented")
}
func (UnimplementedAudienceServiceServer) GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedAudienceServiceServer) CreateSegment(context.Context, *CreateSegmentRequest) (*CreateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedAudienceServiceServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*UpdateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (UnimplementedAudienceServiceServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*DeleteSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedAudienceServiceServer) GetSegmentMetrics(context.Context, *GetSegmentMetricsRequest) (*GetSegmentMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentMetrics not implemented")
}
func (UnimplementedAudienceServiceServer) UpdateSegmentMetrics(context.Context, *UpdateSegmentMetricsRequest) (*UpdateSegmentMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegmentMetrics not implemented")
}
func (UnimplementedAudienceServiceServer) mustEmbedUnimplementedAudienceServiceServer() {}
func (UnimplementedAudienceServiceServer) testEmbeddedByValue()                         {}

// UnsafeAudienceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudienceServiceServer will
// result in compilation errors.
type UnsafeAudienceServiceServer interface {
	mustEmbedUnimplementedAudienceServiceServer()
}

func RegisterAudienceServiceServer(s grpc.ServiceRegistrar, srv AudienceServiceServer) {
	// If the following call pancis, it indicates UnimplementedAudienceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AudienceService_ServiceDesc, srv)
}

func _AudienceService_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_GetSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).GetSegments(ctx, req.(*GetSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_GetSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).GetSegment(ctx, req.(*GetSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_CreateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_UpdateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_DeleteSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_GetSegmentMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).GetSegmentMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_GetSegmentMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).GetSegmentMetrics(ctx, req.(*GetSegmentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudienceService_UpdateSegmentMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudienceServiceServer).UpdateSegmentMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudienceService_UpdateSegmentMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudienceServiceServer).UpdateSegmentMetrics(ctx, req.(*UpdateSegmentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudienceService_ServiceDesc is the grpc.ServiceDesc for AudienceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudienceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audience.AudienceService",
	HandlerType: (*AudienceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegments",
			Handler:    _AudienceService_GetSegments_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _AudienceService_GetSegment_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _AudienceService_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _AudienceService_UpdateSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _AudienceService_DeleteSegment_Handler,
		},
		{
			MethodName: "GetSegmentMetrics",
			Handler:    _AudienceService_GetSegmentMetrics_Handler,
		},
		{
			MethodName: "UpdateSegmentMetrics",
			Handler:    _AudienceService_UpdateSegmentMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audience/pb/audience.proto",
}
