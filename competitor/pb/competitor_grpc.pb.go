// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: competitor/pb/competitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CompetitorService_AddCompetitor_FullMethodName        = "/competitor.CompetitorService/AddCompetitor"
	CompetitorService_GetCompetitor_FullMethodName        = "/competitor.CompetitorService/GetCompetitor"
	CompetitorService_ListCompetitors_FullMethodName      = "/competitor.CompetitorService/ListCompetitors"
	CompetitorService_UpdateCompetitor_FullMethodName     = "/competitor.CompetitorService/UpdateCompetitor"
	CompetitorService_DeleteCompetitor_FullMethodName     = "/competitor.CompetitorService/DeleteCompetitor"
	CompetitorService_GetCompetitorMetrics_FullMethodName = "/competitor.CompetitorService/GetCompetitorMetrics"
	CompetitorService_CompareMetrics_FullMethodName       = "/competitor.CompetitorService/CompareMetrics"
	CompetitorService_TrackCompetitorPost_FullMethodName  = "/competitor.CompetitorService/TrackCompetitorPost"
)

// CompetitorServiceClient is the client API for CompetitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitorServiceClient interface {
	// Competitor management
	AddCompetitor(ctx context.Context, in *AddCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error)
	GetCompetitor(ctx context.Context, in *GetCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error)
	ListCompetitors(ctx context.Context, in *ListCompetitorsRequest, opts ...grpc.CallOption) (*ListCompetitorsResponse, error)
	UpdateCompetitor(ctx context.Context, in *UpdateCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error)
	DeleteCompetitor(ctx context.Context, in *DeleteCompetitorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Competitor metrics
	GetCompetitorMetrics(ctx context.Context, in *GetCompetitorMetricsRequest, opts ...grpc.CallOption) (*GetCompetitorMetricsResponse, error)
	CompareMetrics(ctx context.Context, in *CompareMetricsRequest, opts ...grpc.CallOption) (*CompareMetricsResponse, error)
	TrackCompetitorPost(ctx context.Context, in *TrackCompetitorPostRequest, opts ...grpc.CallOption) (*CompetitorMetric, error)
}

type competitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitorServiceClient(cc grpc.ClientConnInterface) CompetitorServiceClient {
	return &competitorServiceClient{cc}
}

func (c *competitorServiceClient) AddCompetitor(ctx context.Context, in *AddCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Competitor)
	err := c.cc.Invoke(ctx, CompetitorService_AddCompetitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) GetCompetitor(ctx context.Context, in *GetCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Competitor)
	err := c.cc.Invoke(ctx, CompetitorService_GetCompetitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) ListCompetitors(ctx context.Context, in *ListCompetitorsRequest, opts ...grpc.CallOption) (*ListCompetitorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompetitorsResponse)
	err := c.cc.Invoke(ctx, CompetitorService_ListCompetitors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) UpdateCompetitor(ctx context.Context, in *UpdateCompetitorRequest, opts ...grpc.CallOption) (*Competitor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Competitor)
	err := c.cc.Invoke(ctx, CompetitorService_UpdateCompetitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) DeleteCompetitor(ctx context.Context, in *DeleteCompetitorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CompetitorService_DeleteCompetitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) GetCompetitorMetrics(ctx context.Context, in *GetCompetitorMetricsRequest, opts ...grpc.CallOption) (*GetCompetitorMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompetitorMetricsResponse)
	err := c.cc.Invoke(ctx, CompetitorService_GetCompetitorMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) CompareMetrics(ctx context.Context, in *CompareMetricsRequest, opts ...grpc.CallOption) (*CompareMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareMetricsResponse)
	err := c.cc.Invoke(ctx, CompetitorService_CompareMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) TrackCompetitorPost(ctx context.Context, in *TrackCompetitorPostRequest, opts ...grpc.CallOption) (*CompetitorMetric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompetitorMetric)
	err := c.cc.Invoke(ctx, CompetitorService_TrackCompetitorPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitorServiceServer is the server API for CompetitorService service.
// All implementations must embed UnimplementedCompetitorServiceServer
// for forward compatibility.
type CompetitorServiceServer interface {
	// Competitor management
	AddCompetitor(context.Context, *AddCompetitorRequest) (*Competitor, error)
	GetCompetitor(context.Context, *GetCompetitorRequest) (*Competitor, error)
	ListCompetitors(context.Context, *ListCompetitorsRequest) (*ListCompetitorsResponse, error)
	UpdateCompetitor(context.Context, *UpdateCompetitorRequest) (*Competitor, error)
	DeleteCompetitor(context.Context, *DeleteCompetitorRequest) (*emptypb.Empty, error)
	// Competitor metrics
	GetCompetitorMetrics(context.Context, *GetCompetitorMetricsRequest) (*GetCompetitorMetricsResponse, error)
	CompareMetrics(context.Context, *CompareMetricsRequest) (*CompareMetricsResponse, error)
	TrackCompetitorPost(context.Context, *TrackCompetitorPostRequest) (*CompetitorMetric, error)
	mustEmbedUnimplementedCompetitorServiceServer()
}

// UnimplementedCompetitorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompetitorServiceServer struct{}

func (UnimplementedCompetitorServiceServer) AddCompetitor(context.Context, *AddCompetitorRequest) (*Competitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompetitor not implemented")
}
func (UnimplementedCompetitorServiceServer) GetCompetitor(context.Context, *GetCompetitorRequest) (*Competitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitor not implemented")
}
func (UnimplementedCompetitorServiceServer) ListCompetitors(context.Context, *ListCompetitorsRequest) (*ListCompetitorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompetitors not implemented")
}
func (UnimplementedCompetitorServiceServer) UpdateCompetitor(context.Context, *UpdateCompetitorRequest) (*Competitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompetitor not implemented")
}
func (UnimplementedCompetitorServiceServer) DeleteCompetitor(context.Context, *DeleteCompetitorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetitor not implemented")
}
func (UnimplementedCompetitorServiceServer) GetCompetitorMetrics(context.Context, *GetCompetitorMetricsRequest) (*GetCompetitorMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitorMetrics not implemented")
}
func (UnimplementedCompetitorServiceServer) CompareMetrics(context.Context, *CompareMetricsRequest) (*CompareMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareMetrics not implemented")
}
func (UnimplementedCompetitorServiceServer) TrackCompetitorPost(context.Context, *TrackCompetitorPostRequest) (*CompetitorMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackCompetitorPost not implemented")
}
func (UnimplementedCompetitorServiceServer) mustEmbedUnimplementedCompetitorServiceServer() {}
func (UnimplementedCompetitorServiceServer) testEmbeddedByValue()                           {}

// UnsafeCompetitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitorServiceServer will
// result in compilation errors.
type UnsafeCompetitorServiceServer interface {
	mustEmbedUnimplementedCompetitorServiceServer()
}

func RegisterCompetitorServiceServer(s grpc.ServiceRegistrar, srv CompetitorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCompetitorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CompetitorService_ServiceDesc, srv)
}

func _CompetitorService_AddCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).AddCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_AddCompetitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).AddCompetitor(ctx, req.(*AddCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_GetCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).GetCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_GetCompetitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).GetCompetitor(ctx, req.(*GetCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_ListCompetitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompetitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).ListCompetitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_ListCompetitors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).ListCompetitors(ctx, req.(*ListCompetitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_UpdateCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).UpdateCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_UpdateCompetitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).UpdateCompetitor(ctx, req.(*UpdateCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_DeleteCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).DeleteCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_DeleteCompetitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).DeleteCompetitor(ctx, req.(*DeleteCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_GetCompetitorMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetitorMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).GetCompetitorMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_GetCompetitorMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).GetCompetitorMetrics(ctx, req.(*GetCompetitorMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_CompareMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).CompareMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_CompareMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).CompareMetrics(ctx, req.(*CompareMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_TrackCompetitorPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackCompetitorPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).TrackCompetitorPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompetitorService_TrackCompetitorPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).TrackCompetitorPost(ctx, req.(*TrackCompetitorPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompetitorService_ServiceDesc is the grpc.ServiceDesc for CompetitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompetitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "competitor.CompetitorService",
	HandlerType: (*CompetitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCompetitor",
			Handler:    _CompetitorService_AddCompetitor_Handler,
		},
		{
			MethodName: "GetCompetitor",
			Handler:    _CompetitorService_GetCompetitor_Handler,
		},
		{
			MethodName: "ListCompetitors",
			Handler:    _CompetitorService_ListCompetitors_Handler,
		},
		{
			MethodName: "UpdateCompetitor",
			Handler:    _CompetitorService_UpdateCompetitor_Handler,
		},
		{
			MethodName: "DeleteCompetitor",
			Handler:    _CompetitorService_DeleteCompetitor_Handler,
		},
		{
			MethodName: "GetCompetitorMetrics",
			Handler:    _CompetitorService_GetCompetitorMetrics_Handler,
		},
		{
			MethodName: "CompareMetrics",
			Handler:    _CompetitorService_CompareMetrics_Handler,
		},
		{
			MethodName: "TrackCompetitorPost",
			Handler:    _CompetitorService_TrackCompetitorPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competitor/pb/competitor.proto",
}
