// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: analytics/pb/analytics.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_GetPostingTimeRecommendations_FullMethodName   = "/analytics.AnalyticsService/GetPostingTimeRecommendations"
	AnalyticsService_GetContentFormatRecommendations_FullMethodName = "/analytics.AnalyticsService/GetContentFormatRecommendations"
	AnalyticsService_PredictEngagement_FullMethodName               = "/analytics.AnalyticsService/PredictEngagement"
	AnalyticsService_AnalyzeContentPerformance_FullMethodName       = "/analytics.AnalyticsService/AnalyzeContentPerformance"
	AnalyticsService_CreateRecommendation_FullMethodName            = "/analytics.AnalyticsService/CreateRecommendation"
	AnalyticsService_GetRecommendations_FullMethodName              = "/analytics.AnalyticsService/GetRecommendations"
	AnalyticsService_UpdateRecommendationStatus_FullMethodName      = "/analytics.AnalyticsService/UpdateRecommendationStatus"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	// Predictive analytics endpoints
	GetPostingTimeRecommendations(ctx context.Context, in *PostingTimeRequest, opts ...grpc.CallOption) (*PostingTimeResponse, error)
	GetContentFormatRecommendations(ctx context.Context, in *ContentFormatRequest, opts ...grpc.CallOption) (*ContentFormatResponse, error)
	// Performance predictions
	PredictEngagement(ctx context.Context, in *PredictEngagementRequest, opts ...grpc.CallOption) (*EngagementPrediction, error)
	// Content analysis
	AnalyzeContentPerformance(ctx context.Context, in *ContentPerformanceRequest, opts ...grpc.CallOption) (*ContentPerformanceResponse, error)
	// Recommendation management
	CreateRecommendation(ctx context.Context, in *CreateRecommendationRequest, opts ...grpc.CallOption) (*Recommendation, error)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*RecommendationsResponse, error)
	UpdateRecommendationStatus(ctx context.Context, in *UpdateRecommendationStatusRequest, opts ...grpc.CallOption) (*UpdateRecommendationStatusResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetPostingTimeRecommendations(ctx context.Context, in *PostingTimeRequest, opts ...grpc.CallOption) (*PostingTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostingTimeResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPostingTimeRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetContentFormatRecommendations(ctx context.Context, in *ContentFormatRequest, opts ...grpc.CallOption) (*ContentFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentFormatResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetContentFormatRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) PredictEngagement(ctx context.Context, in *PredictEngagementRequest, opts ...grpc.CallOption) (*EngagementPrediction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EngagementPrediction)
	err := c.cc.Invoke(ctx, AnalyticsService_PredictEngagement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AnalyzeContentPerformance(ctx context.Context, in *ContentPerformanceRequest, opts ...grpc.CallOption) (*ContentPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentPerformanceResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_AnalyzeContentPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) CreateRecommendation(ctx context.Context, in *CreateRecommendationRequest, opts ...grpc.CallOption) (*Recommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Recommendation)
	err := c.cc.Invoke(ctx, AnalyticsService_CreateRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*RecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) UpdateRecommendationStatus(ctx context.Context, in *UpdateRecommendationStatusRequest, opts ...grpc.CallOption) (*UpdateRecommendationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecommendationStatusResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_UpdateRecommendationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	// Predictive analytics endpoints
	GetPostingTimeRecommendations(context.Context, *PostingTimeRequest) (*PostingTimeResponse, error)
	GetContentFormatRecommendations(context.Context, *ContentFormatRequest) (*ContentFormatResponse, error)
	// Performance predictions
	PredictEngagement(context.Context, *PredictEngagementRequest) (*EngagementPrediction, error)
	// Content analysis
	AnalyzeContentPerformance(context.Context, *ContentPerformanceRequest) (*ContentPerformanceResponse, error)
	// Recommendation management
	CreateRecommendation(context.Context, *CreateRecommendationRequest) (*Recommendation, error)
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*RecommendationsResponse, error)
	UpdateRecommendationStatus(context.Context, *UpdateRecommendationStatusRequest) (*UpdateRecommendationStatusResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetPostingTimeRecommendations(context.Context, *PostingTimeRequest) (*PostingTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostingTimeRecommendations not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetContentFormatRecommendations(context.Context, *ContentFormatRequest) (*ContentFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentFormatRecommendations not implemented")
}
func (UnimplementedAnalyticsServiceServer) PredictEngagement(context.Context, *PredictEngagementRequest) (*EngagementPrediction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictEngagement not implemented")
}
func (UnimplementedAnalyticsServiceServer) AnalyzeContentPerformance(context.Context, *ContentPerformanceRequest) (*ContentPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeContentPerformance not implemented")
}
func (UnimplementedAnalyticsServiceServer) CreateRecommendation(context.Context, *CreateRecommendationRequest) (*Recommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommendation not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*RecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedAnalyticsServiceServer) UpdateRecommendationStatus(context.Context, *UpdateRecommendationStatusRequest) (*UpdateRecommendationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendationStatus not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetPostingTimeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostingTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPostingTimeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPostingTimeRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPostingTimeRecommendations(ctx, req.(*PostingTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetContentFormatRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetContentFormatRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetContentFormatRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetContentFormatRecommendations(ctx, req.(*ContentFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_PredictEngagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictEngagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).PredictEngagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_PredictEngagement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).PredictEngagement(ctx, req.(*PredictEngagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AnalyzeContentPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AnalyzeContentPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_AnalyzeContentPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AnalyzeContentPerformance(ctx, req.(*ContentPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_CreateRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CreateRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_CreateRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CreateRecommendation(ctx, req.(*CreateRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_UpdateRecommendationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).UpdateRecommendationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_UpdateRecommendationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).UpdateRecommendationStatus(ctx, req.(*UpdateRecommendationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostingTimeRecommendations",
			Handler:    _AnalyticsService_GetPostingTimeRecommendations_Handler,
		},
		{
			MethodName: "GetContentFormatRecommendations",
			Handler:    _AnalyticsService_GetContentFormatRecommendations_Handler,
		},
		{
			MethodName: "PredictEngagement",
			Handler:    _AnalyticsService_PredictEngagement_Handler,
		},
		{
			MethodName: "AnalyzeContentPerformance",
			Handler:    _AnalyticsService_AnalyzeContentPerformance_Handler,
		},
		{
			MethodName: "CreateRecommendation",
			Handler:    _AnalyticsService_CreateRecommendation_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _AnalyticsService_GetRecommendations_Handler,
		},
		{
			MethodName: "UpdateRecommendationStatus",
			Handler:    _AnalyticsService_UpdateRecommendationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/pb/analytics.proto",
}
