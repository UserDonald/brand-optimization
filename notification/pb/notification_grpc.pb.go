// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notification/pb/notification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_CreateNotification_FullMethodName      = "/notification.NotificationService/CreateNotification"
	NotificationService_GetNotifications_FullMethodName        = "/notification.NotificationService/GetNotifications"
	NotificationService_MarkNotificationAsRead_FullMethodName  = "/notification.NotificationService/MarkNotificationAsRead"
	NotificationService_ArchiveNotification_FullMethodName     = "/notification.NotificationService/ArchiveNotification"
	NotificationService_DeleteNotification_FullMethodName      = "/notification.NotificationService/DeleteNotification"
	NotificationService_CreateAlertThreshold_FullMethodName    = "/notification.NotificationService/CreateAlertThreshold"
	NotificationService_GetAlertThresholds_FullMethodName      = "/notification.NotificationService/GetAlertThresholds"
	NotificationService_UpdateAlertThreshold_FullMethodName    = "/notification.NotificationService/UpdateAlertThreshold"
	NotificationService_DeleteAlertThreshold_FullMethodName    = "/notification.NotificationService/DeleteAlertThreshold"
	NotificationService_CreateScheduledReport_FullMethodName   = "/notification.NotificationService/CreateScheduledReport"
	NotificationService_GetScheduledReports_FullMethodName     = "/notification.NotificationService/GetScheduledReports"
	NotificationService_UpdateScheduledReport_FullMethodName   = "/notification.NotificationService/UpdateScheduledReport"
	NotificationService_DeleteScheduledReport_FullMethodName   = "/notification.NotificationService/DeleteScheduledReport"
	NotificationService_CheckAlertThresholds_FullMethodName    = "/notification.NotificationService/CheckAlertThresholds"
	NotificationService_ProcessScheduledReports_FullMethodName = "/notification.NotificationService/ProcessScheduledReports"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// Notification management
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Notification, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	ArchiveNotification(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	DeleteNotification(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// Alert threshold management
	CreateAlertThreshold(ctx context.Context, in *CreateAlertThresholdRequest, opts ...grpc.CallOption) (*AlertThreshold, error)
	GetAlertThresholds(ctx context.Context, in *GetAlertThresholdsRequest, opts ...grpc.CallOption) (*AlertThresholdsResponse, error)
	UpdateAlertThreshold(ctx context.Context, in *UpdateAlertThresholdRequest, opts ...grpc.CallOption) (*AlertThreshold, error)
	DeleteAlertThreshold(ctx context.Context, in *DeleteAlertThresholdRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// Scheduled report management
	CreateScheduledReport(ctx context.Context, in *CreateScheduledReportRequest, opts ...grpc.CallOption) (*ScheduledReport, error)
	GetScheduledReports(ctx context.Context, in *GetScheduledReportsRequest, opts ...grpc.CallOption) (*ScheduledReportsResponse, error)
	UpdateScheduledReport(ctx context.Context, in *UpdateScheduledReportRequest, opts ...grpc.CallOption) (*ScheduledReport, error)
	DeleteScheduledReport(ctx context.Context, in *DeleteScheduledReportRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	// Background processes
	CheckAlertThresholds(ctx context.Context, in *CheckAlertThresholdsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
	ProcessScheduledReports(ctx context.Context, in *ProcessScheduledReportsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Notification)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationAsRead(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkNotificationAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ArchiveNotification(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_ArchiveNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotification(ctx context.Context, in *NotificationStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateAlertThreshold(ctx context.Context, in *CreateAlertThresholdRequest, opts ...grpc.CallOption) (*AlertThreshold, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertThreshold)
	err := c.cc.Invoke(ctx, NotificationService_CreateAlertThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetAlertThresholds(ctx context.Context, in *GetAlertThresholdsRequest, opts ...grpc.CallOption) (*AlertThresholdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertThresholdsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetAlertThresholds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateAlertThreshold(ctx context.Context, in *UpdateAlertThresholdRequest, opts ...grpc.CallOption) (*AlertThreshold, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertThreshold)
	err := c.cc.Invoke(ctx, NotificationService_UpdateAlertThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteAlertThreshold(ctx context.Context, in *DeleteAlertThresholdRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteAlertThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateScheduledReport(ctx context.Context, in *CreateScheduledReportRequest, opts ...grpc.CallOption) (*ScheduledReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduledReport)
	err := c.cc.Invoke(ctx, NotificationService_CreateScheduledReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetScheduledReports(ctx context.Context, in *GetScheduledReportsRequest, opts ...grpc.CallOption) (*ScheduledReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduledReportsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetScheduledReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateScheduledReport(ctx context.Context, in *UpdateScheduledReportRequest, opts ...grpc.CallOption) (*ScheduledReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduledReport)
	err := c.cc.Invoke(ctx, NotificationService_UpdateScheduledReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteScheduledReport(ctx context.Context, in *DeleteScheduledReportRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteScheduledReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CheckAlertThresholds(ctx context.Context, in *CheckAlertThresholdsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_CheckAlertThresholds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ProcessScheduledReports(ctx context.Context, in *ProcessScheduledReportsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ProcessScheduledReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// Notification management
	CreateNotification(context.Context, *CreateNotificationRequest) (*Notification, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*NotificationsResponse, error)
	MarkNotificationAsRead(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error)
	ArchiveNotification(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error)
	DeleteNotification(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error)
	// Alert threshold management
	CreateAlertThreshold(context.Context, *CreateAlertThresholdRequest) (*AlertThreshold, error)
	GetAlertThresholds(context.Context, *GetAlertThresholdsRequest) (*AlertThresholdsResponse, error)
	UpdateAlertThreshold(context.Context, *UpdateAlertThresholdRequest) (*AlertThreshold, error)
	DeleteAlertThreshold(context.Context, *DeleteAlertThresholdRequest) (*UpdateStatusResponse, error)
	// Scheduled report management
	CreateScheduledReport(context.Context, *CreateScheduledReportRequest) (*ScheduledReport, error)
	GetScheduledReports(context.Context, *GetScheduledReportsRequest) (*ScheduledReportsResponse, error)
	UpdateScheduledReport(context.Context, *UpdateScheduledReportRequest) (*ScheduledReport, error)
	DeleteScheduledReport(context.Context, *DeleteScheduledReportRequest) (*UpdateStatusResponse, error)
	// Background processes
	CheckAlertThresholds(context.Context, *CheckAlertThresholdsRequest) (*NotificationsResponse, error)
	ProcessScheduledReports(context.Context, *ProcessScheduledReportsRequest) (*NotificationsResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) MarkNotificationAsRead(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) ArchiveNotification(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveNotification not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteNotification(context.Context, *NotificationStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedNotificationServiceServer) CreateAlertThreshold(context.Context, *CreateAlertThresholdRequest) (*AlertThreshold, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertThreshold not implemented")
}
func (UnimplementedNotificationServiceServer) GetAlertThresholds(context.Context, *GetAlertThresholdsRequest) (*AlertThresholdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertThresholds not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateAlertThreshold(context.Context, *UpdateAlertThresholdRequest) (*AlertThreshold, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertThreshold not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteAlertThreshold(context.Context, *DeleteAlertThresholdRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertThreshold not implemented")
}
func (UnimplementedNotificationServiceServer) CreateScheduledReport(context.Context, *CreateScheduledReportRequest) (*ScheduledReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledReport not implemented")
}
func (UnimplementedNotificationServiceServer) GetScheduledReports(context.Context, *GetScheduledReportsRequest) (*ScheduledReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledReports not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateScheduledReport(context.Context, *UpdateScheduledReportRequest) (*ScheduledReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledReport not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteScheduledReport(context.Context, *DeleteScheduledReportRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledReport not implemented")
}
func (UnimplementedNotificationServiceServer) CheckAlertThresholds(context.Context, *CheckAlertThresholdsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAlertThresholds not implemented")
}
func (UnimplementedNotificationServiceServer) ProcessScheduledReports(context.Context, *ProcessScheduledReportsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessScheduledReports not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, req.(*NotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ArchiveNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ArchiveNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ArchiveNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ArchiveNotification(ctx, req.(*NotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, req.(*NotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateAlertThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateAlertThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateAlertThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateAlertThreshold(ctx, req.(*CreateAlertThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetAlertThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertThresholdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetAlertThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetAlertThresholds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetAlertThresholds(ctx, req.(*GetAlertThresholdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateAlertThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateAlertThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateAlertThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateAlertThreshold(ctx, req.(*UpdateAlertThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteAlertThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteAlertThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteAlertThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteAlertThreshold(ctx, req.(*DeleteAlertThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateScheduledReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateScheduledReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateScheduledReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateScheduledReport(ctx, req.(*CreateScheduledReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetScheduledReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetScheduledReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetScheduledReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetScheduledReports(ctx, req.(*GetScheduledReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateScheduledReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateScheduledReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateScheduledReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateScheduledReport(ctx, req.(*UpdateScheduledReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteScheduledReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteScheduledReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteScheduledReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteScheduledReport(ctx, req.(*DeleteScheduledReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CheckAlertThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAlertThresholdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CheckAlertThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CheckAlertThresholds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CheckAlertThresholds(ctx, req.(*CheckAlertThresholdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ProcessScheduledReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessScheduledReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ProcessScheduledReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ProcessScheduledReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ProcessScheduledReports(ctx, req.(*ProcessScheduledReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _NotificationService_CreateNotification_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationService_GetNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _NotificationService_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "ArchiveNotification",
			Handler:    _NotificationService_ArchiveNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NotificationService_DeleteNotification_Handler,
		},
		{
			MethodName: "CreateAlertThreshold",
			Handler:    _NotificationService_CreateAlertThreshold_Handler,
		},
		{
			MethodName: "GetAlertThresholds",
			Handler:    _NotificationService_GetAlertThresholds_Handler,
		},
		{
			MethodName: "UpdateAlertThreshold",
			Handler:    _NotificationService_UpdateAlertThreshold_Handler,
		},
		{
			MethodName: "DeleteAlertThreshold",
			Handler:    _NotificationService_DeleteAlertThreshold_Handler,
		},
		{
			MethodName: "CreateScheduledReport",
			Handler:    _NotificationService_CreateScheduledReport_Handler,
		},
		{
			MethodName: "GetScheduledReports",
			Handler:    _NotificationService_GetScheduledReports_Handler,
		},
		{
			MethodName: "UpdateScheduledReport",
			Handler:    _NotificationService_UpdateScheduledReport_Handler,
		},
		{
			MethodName: "DeleteScheduledReport",
			Handler:    _NotificationService_DeleteScheduledReport_Handler,
		},
		{
			MethodName: "CheckAlertThresholds",
			Handler:    _NotificationService_CheckAlertThresholds_Handler,
		},
		{
			MethodName: "ProcessScheduledReports",
			Handler:    _NotificationService_ProcessScheduledReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/pb/notification.proto",
}
