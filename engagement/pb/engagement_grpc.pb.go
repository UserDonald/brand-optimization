// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: engagement/pb/engagement.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EngagementService_TrackPost_FullMethodName                    = "/engagement.EngagementService/TrackPost"
	EngagementService_GetPersonalMetrics_FullMethodName           = "/engagement.EngagementService/GetPersonalMetrics"
	EngagementService_UpdatePostMetrics_FullMethodName            = "/engagement.EngagementService/UpdatePostMetrics"
	EngagementService_DeletePostMetrics_FullMethodName            = "/engagement.EngagementService/DeletePostMetrics"
	EngagementService_GetEngagementTrends_FullMethodName          = "/engagement.EngagementService/GetEngagementTrends"
	EngagementService_GetTopPerformingPosts_FullMethodName        = "/engagement.EngagementService/GetTopPerformingPosts"
	EngagementService_GetEngagementByDayTime_FullMethodName       = "/engagement.EngagementService/GetEngagementByDayTime"
	EngagementService_GetEngagementByContentType_FullMethodName   = "/engagement.EngagementService/GetEngagementByContentType"
	EngagementService_GetEngagementByContentLength_FullMethodName = "/engagement.EngagementService/GetEngagementByContentLength"
)

// EngagementServiceClient is the client API for EngagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngagementServiceClient interface {
	// Personal metrics management
	TrackPost(ctx context.Context, in *TrackPostRequest, opts ...grpc.CallOption) (*PersonalMetric, error)
	GetPersonalMetrics(ctx context.Context, in *GetPersonalMetricsRequest, opts ...grpc.CallOption) (*GetPersonalMetricsResponse, error)
	UpdatePostMetrics(ctx context.Context, in *UpdatePostMetricsRequest, opts ...grpc.CallOption) (*PersonalMetric, error)
	DeletePostMetrics(ctx context.Context, in *DeletePostMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Engagement analysis
	GetEngagementTrends(ctx context.Context, in *GetEngagementTrendsRequest, opts ...grpc.CallOption) (*GetEngagementTrendsResponse, error)
	GetTopPerformingPosts(ctx context.Context, in *GetTopPerformingPostsRequest, opts ...grpc.CallOption) (*GetTopPerformingPostsResponse, error)
	GetEngagementByDayTime(ctx context.Context, in *GetEngagementByDayTimeRequest, opts ...grpc.CallOption) (*GetEngagementByDayTimeResponse, error)
	// Content engagement
	GetEngagementByContentType(ctx context.Context, in *GetEngagementByContentTypeRequest, opts ...grpc.CallOption) (*GetEngagementByContentTypeResponse, error)
	GetEngagementByContentLength(ctx context.Context, in *GetEngagementByContentLengthRequest, opts ...grpc.CallOption) (*GetEngagementByContentLengthResponse, error)
}

type engagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngagementServiceClient(cc grpc.ClientConnInterface) EngagementServiceClient {
	return &engagementServiceClient{cc}
}

func (c *engagementServiceClient) TrackPost(ctx context.Context, in *TrackPostRequest, opts ...grpc.CallOption) (*PersonalMetric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalMetric)
	err := c.cc.Invoke(ctx, EngagementService_TrackPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetPersonalMetrics(ctx context.Context, in *GetPersonalMetricsRequest, opts ...grpc.CallOption) (*GetPersonalMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonalMetricsResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetPersonalMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) UpdatePostMetrics(ctx context.Context, in *UpdatePostMetricsRequest, opts ...grpc.CallOption) (*PersonalMetric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalMetric)
	err := c.cc.Invoke(ctx, EngagementService_UpdatePostMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) DeletePostMetrics(ctx context.Context, in *DeletePostMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EngagementService_DeletePostMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetEngagementTrends(ctx context.Context, in *GetEngagementTrendsRequest, opts ...grpc.CallOption) (*GetEngagementTrendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngagementTrendsResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetEngagementTrends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetTopPerformingPosts(ctx context.Context, in *GetTopPerformingPostsRequest, opts ...grpc.CallOption) (*GetTopPerformingPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopPerformingPostsResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetTopPerformingPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetEngagementByDayTime(ctx context.Context, in *GetEngagementByDayTimeRequest, opts ...grpc.CallOption) (*GetEngagementByDayTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngagementByDayTimeResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetEngagementByDayTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetEngagementByContentType(ctx context.Context, in *GetEngagementByContentTypeRequest, opts ...grpc.CallOption) (*GetEngagementByContentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngagementByContentTypeResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetEngagementByContentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engagementServiceClient) GetEngagementByContentLength(ctx context.Context, in *GetEngagementByContentLengthRequest, opts ...grpc.CallOption) (*GetEngagementByContentLengthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngagementByContentLengthResponse)
	err := c.cc.Invoke(ctx, EngagementService_GetEngagementByContentLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngagementServiceServer is the server API for EngagementService service.
// All implementations must embed UnimplementedEngagementServiceServer
// for forward compatibility.
type EngagementServiceServer interface {
	// Personal metrics management
	TrackPost(context.Context, *TrackPostRequest) (*PersonalMetric, error)
	GetPersonalMetrics(context.Context, *GetPersonalMetricsRequest) (*GetPersonalMetricsResponse, error)
	UpdatePostMetrics(context.Context, *UpdatePostMetricsRequest) (*PersonalMetric, error)
	DeletePostMetrics(context.Context, *DeletePostMetricsRequest) (*emptypb.Empty, error)
	// Engagement analysis
	GetEngagementTrends(context.Context, *GetEngagementTrendsRequest) (*GetEngagementTrendsResponse, error)
	GetTopPerformingPosts(context.Context, *GetTopPerformingPostsRequest) (*GetTopPerformingPostsResponse, error)
	GetEngagementByDayTime(context.Context, *GetEngagementByDayTimeRequest) (*GetEngagementByDayTimeResponse, error)
	// Content engagement
	GetEngagementByContentType(context.Context, *GetEngagementByContentTypeRequest) (*GetEngagementByContentTypeResponse, error)
	GetEngagementByContentLength(context.Context, *GetEngagementByContentLengthRequest) (*GetEngagementByContentLengthResponse, error)
	mustEmbedUnimplementedEngagementServiceServer()
}

// UnimplementedEngagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngagementServiceServer struct{}

func (UnimplementedEngagementServiceServer) TrackPost(context.Context, *TrackPostRequest) (*PersonalMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPost not implemented")
}
func (UnimplementedEngagementServiceServer) GetPersonalMetrics(context.Context, *GetPersonalMetricsRequest) (*GetPersonalMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalMetrics not implemented")
}
func (UnimplementedEngagementServiceServer) UpdatePostMetrics(context.Context, *UpdatePostMetricsRequest) (*PersonalMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostMetrics not implemented")
}
func (UnimplementedEngagementServiceServer) DeletePostMetrics(context.Context, *DeletePostMetricsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostMetrics not implemented")
}
func (UnimplementedEngagementServiceServer) GetEngagementTrends(context.Context, *GetEngagementTrendsRequest) (*GetEngagementTrendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngagementTrends not implemented")
}
func (UnimplementedEngagementServiceServer) GetTopPerformingPosts(context.Context, *GetTopPerformingPostsRequest) (*GetTopPerformingPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPerformingPosts not implemented")
}
func (UnimplementedEngagementServiceServer) GetEngagementByDayTime(context.Context, *GetEngagementByDayTimeRequest) (*GetEngagementByDayTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngagementByDayTime not implemented")
}
func (UnimplementedEngagementServiceServer) GetEngagementByContentType(context.Context, *GetEngagementByContentTypeRequest) (*GetEngagementByContentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngagementByContentType not implemented")
}
func (UnimplementedEngagementServiceServer) GetEngagementByContentLength(context.Context, *GetEngagementByContentLengthRequest) (*GetEngagementByContentLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngagementByContentLength not implemented")
}
func (UnimplementedEngagementServiceServer) mustEmbedUnimplementedEngagementServiceServer() {}
func (UnimplementedEngagementServiceServer) testEmbeddedByValue()                           {}

// UnsafeEngagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngagementServiceServer will
// result in compilation errors.
type UnsafeEngagementServiceServer interface {
	mustEmbedUnimplementedEngagementServiceServer()
}

func RegisterEngagementServiceServer(s grpc.ServiceRegistrar, srv EngagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedEngagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EngagementService_ServiceDesc, srv)
}

func _EngagementService_TrackPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).TrackPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_TrackPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).TrackPost(ctx, req.(*TrackPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetPersonalMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetPersonalMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetPersonalMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetPersonalMetrics(ctx, req.(*GetPersonalMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_UpdatePostMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).UpdatePostMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_UpdatePostMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).UpdatePostMetrics(ctx, req.(*UpdatePostMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_DeletePostMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).DeletePostMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_DeletePostMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).DeletePostMetrics(ctx, req.(*DeletePostMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetEngagementTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngagementTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetEngagementTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetEngagementTrends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetEngagementTrends(ctx, req.(*GetEngagementTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetTopPerformingPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPerformingPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetTopPerformingPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetTopPerformingPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetTopPerformingPosts(ctx, req.(*GetTopPerformingPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetEngagementByDayTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngagementByDayTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetEngagementByDayTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetEngagementByDayTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetEngagementByDayTime(ctx, req.(*GetEngagementByDayTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetEngagementByContentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngagementByContentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetEngagementByContentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetEngagementByContentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetEngagementByContentType(ctx, req.(*GetEngagementByContentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngagementService_GetEngagementByContentLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngagementByContentLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngagementServiceServer).GetEngagementByContentLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngagementService_GetEngagementByContentLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngagementServiceServer).GetEngagementByContentLength(ctx, req.(*GetEngagementByContentLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngagementService_ServiceDesc is the grpc.ServiceDesc for EngagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engagement.EngagementService",
	HandlerType: (*EngagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackPost",
			Handler:    _EngagementService_TrackPost_Handler,
		},
		{
			MethodName: "GetPersonalMetrics",
			Handler:    _EngagementService_GetPersonalMetrics_Handler,
		},
		{
			MethodName: "UpdatePostMetrics",
			Handler:    _EngagementService_UpdatePostMetrics_Handler,
		},
		{
			MethodName: "DeletePostMetrics",
			Handler:    _EngagementService_DeletePostMetrics_Handler,
		},
		{
			MethodName: "GetEngagementTrends",
			Handler:    _EngagementService_GetEngagementTrends_Handler,
		},
		{
			MethodName: "GetTopPerformingPosts",
			Handler:    _EngagementService_GetTopPerformingPosts_Handler,
		},
		{
			MethodName: "GetEngagementByDayTime",
			Handler:    _EngagementService_GetEngagementByDayTime_Handler,
		},
		{
			MethodName: "GetEngagementByContentType",
			Handler:    _EngagementService_GetEngagementByContentType_Handler,
		},
		{
			MethodName: "GetEngagementByContentLength",
			Handler:    _EngagementService_GetEngagementByContentLength_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engagement/pb/engagement.proto",
}
